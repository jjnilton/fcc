class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      sessionLength: 25,
      breakLength: 5,
      playing: false
    }
    this.reset = this.state;
  }
  
  resetApp = () => {
    this.setState(this.reset);
    
  }
  
  setSessionLength = (newLength) => {
    
    this.setState({
      sessionLength: newLength
    })
    
  }
  
  setBreakLength = (newLength) => {
    
    this.setState({
      breakLength: newLength
    })
    
  }
  
  setPlayingState = (status) => {
    this.setState({
      playing: status
    })
  }
  
  render() {
    
    return (
      <>
        <Timer
          sessionLength={this.state.sessionLength * 60}
          breakLength={this.state.breakLength * 60}
          resetApp={this.resetApp}
          playing={this.state.playing}
          setPlayingState={this.setPlayingState}
        />
        <Settings
          sessionLength={this.state.sessionLength}
          breakLength={this.state.breakLength}
          setSessionLength={this.setSessionLength}
          setBreakLength={this.setBreakLength}
          playing={this.state.playing}
        />
      </>
    )
    
  }
  
}

class Timer extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      label: 'Timer',
      break: false,
      playing: this.props.playing,
      breakLength: this.props.breakLength,
      sessionLength: this.props.sessionLength,
      started: false
    }
    this.reset = this.state;
    this.timer;
    this.toggleTimer = this.toggleTimer.bind(this);
    this.resetTimer = this.resetTimer.bind(this);
    this.beep = React.createRef();

    
  }

  componentDidUpdate(prevProps, prevState) {
    
      if (this.props.sessionLength !== prevProps.sessionLength && !this.state.started) {
        this.setState({
          sessionLength: this.props.sessionLength
        })  
      }
      
      if (this.state.sessionLength === 0 && !this.state.break && this.state.playing) {
        console.log('play audio')
        console.log(this.beep.current.duration)
        this.beep.current.play();
      }
    
      if (this.state.sessionLength === -1 && !this.state.break && this.state.playing) {    
        
        this.setState({
          break: true,
          label: 'Break',
          sessionLength: this.props.breakLength
          
        })
        
        
        
      } else if (this.state.sessionLength === -1 && this.state.break) {
        this.setState({
          break: false,
          label: 'Timer',
          sessionLength: this.props.sessionLength
        })
      }

  }
  
  resetTimer() {
    
    this.setState(this.reset);
    this.props.resetApp();
    this.beep.current.pause();
    this.beep.current.currentTime = 0;
    clearInterval(this.timer);
    
    
  }
  
  toggleTimer() {
    
    this.setState({
      playing: !this.state.playing
    })
    
    if (!this.state.started) {
      this.setState({
        started: true
      })
    }
    
    this.props.setPlayingState(!this.state.playing);
    
    let currentPlaying = !this.state.playing;
    
    if (currentPlaying === false) {
      clearInterval(this.timer)
    } else {
      this.timer = setInterval(() => {
        this.setState({
          sessionLength: this.state.sessionLength - 1
        });

      }, 1000);    
    }

    
  }
  
  formatTime = (timeInSeconds) => {
    
    let minutes = parseInt(timeInSeconds / 60);
    let seconds = timeInSeconds % 60;
    
    if (minutes < 10) {
      minutes = `0${minutes}`
    }
    
    if (seconds < 10) {
      seconds = `0${seconds}`
    }
    
    return `${minutes}:${seconds}`
    
  }
  
  render() {
    
    return(
      <>
        <div id="timer">
          <div id="timer-label">{this.state.label}</div>
          <div id="time-left" className={this.state.started && !this.state.playing ? "paused" : ""}>{this.formatTime(this.state.sessionLength)}</div>
          <div id="start_stop" className={this.state.playing ? "playing" : ""} onClick={this.toggleTimer}>{this.state.playing ? '\u23F8' : '\u23F5'}</div>
          <div id="reset" onClick={this.resetTimer}>â†º</div>
          <audio id="beep" ref={this.beep} src="../media/beep.mp3"></audio>
        </div>
      </>
    )
    
    
  }
  
}


class Setting extends React.Component {
  constructor(props) {
    super(props);
    this.decrement = this.decrement.bind(this);
    this.increment = this.increment.bind(this);
    this.settingLength = React.createRef();
  }
  
  decrement() {
    
    const value = this.props.value - 1
    
    if (this.props.value > 1) {
      if (event.target.id === 'session-decrement') {
        this.props.setSessionLength(value);
      } else
      if (event.target.id === 'break-decrement') {
        this.props.setBreakLength(value);
      }
    } else {
      console.log("Can't decrement.")
      
    }
  }
  
  increment() {
    
    
    const value = this.props.value + 1
    
    if (this.props.value < 60) {
      if (event.target.id === 'session-increment') {
        this.props.setSessionLength(value);
      } else
      if (event.target.id === 'break-increment') {
        this.props.setBreakLength(value);
      }
      
    }

  }
  
  handleMouseDown = (event) => {
    
    console.log(event.target.id)
    
    if (this.props.value === 1 && event.target.id.includes('decrement') || this.props.value === 60 && event.target.id.includes('increment')) { 
      this.settingLength.current.classList.add("limit-cue");
    }
    
  }
  
  handleMouseUp = (event) => {

    if (this.settingLength.current.classList.contains("limit-cue")) {
      this.settingLength.current.classList.remove("limit-cue");
    }
    

  }
  
  render() {
    
    console.log(this.props)
    
    return (
      
      <div id="setting">
        <div id={this.props.label}>{this.props.name}</div>
        <div id={this.props.id.toString() + "-length"} className={this.props.value === 1 || this.props.value === 60 ? "bottom-limit" : ""} ref={this.settingLength}>{this.props.value}</div>
        <div id={this.props.id.toString() + "-decrement"} onClick={this.decrement} onMouseDown={this.handleMouseDown} onMouseUp={this.handleMouseUp} onTouchStart={this.handleMouseDown} onTouchEnd={this.handleMouseUp}>-</div>
        <div id={this.props.id.toString() + "-increment"} onClick={this.increment} onMouseDown={this.handleMouseDown} onMouseUp={this.handleMouseUp} onTouchStart={this.handleMouseDown} onTouchEnd={this.handleMouseUp}>+</div>
      </div>
    
    )
    
  }
  
}

class Settings extends React.Component {
  constructor(props) {
    super(props);
  }
  
  
  getAvailableSettingsArray() {
    
    const availableSettingsJSON = [
      
      { "id": "break",
        "label": "break-label",
        "name": "Break Length",
        "value": this.props.breakLength
      },
      { "id": "session",
        "label": "session-label",
        "name": "Session Length",
        "value": this.props.sessionLength
      }
      
    ];
    
    const availableSettings = [];
    
    for (const setting of availableSettingsJSON) {
      
     
      
      availableSettings.push(<Setting
                               id={setting.id}
                               label={setting.label}
                               name={setting.name}
                               value={setting.value}
                               setSessionLength={this.props.setSessionLength}
                               setBreakLength={this.props.setBreakLength}
                               playing={this.props.playing}
                               />)
      
    }
    
    return (
      <div id="settings">{availableSettings}</div>
    )
    
  }
  
  
  render() {
    
    return (
      <>
        <div>
          {this.getAvailableSettingsArray()}
        </div>
      </>
    )
    
    
  }
  
  
}

ReactDOM.render(<App />, document.getElementById('root'))